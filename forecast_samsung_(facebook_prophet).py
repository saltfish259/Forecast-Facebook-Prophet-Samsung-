# -*- coding: utf-8 -*-
"""Forecast Samsung (Facebook Prophet).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hrp2lsiZY1uuB-cF2IlZ3ADW5jOFRxyY

**Nama**: Razif Zulvikar Hatuwe

## Kaggle Download

1. `import kagglehub` mengimpor modul kagglehub, yang memungkinkan pengguna untuk mengunduh dataset dari Kaggle menggunakan API
2. `path = kagglehub.dataset_download(...)`, fungsi untuk mengunduh versi terbaru dari dataset. hasil unduhan akan di simpan pada variable path.
3. `print("Path to dataset files:", path)` berfungsi untuk melihat lokasi file dataset yang baru saja di unduh.
"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("caesarmario/samsung-electronics-stock-historical-price")

print("Path to dataset files:", path)

import pandas as pd
data = pd.read_csv('/root/.cache/kagglehub/datasets/caesarmario/samsung-electronics-stock-historical-price/versions/759/005930.KS.csv')

"""# EDA

## Library EDA

1. `seasonal_decompose` dari `statsmodels.tsa.seasonal` digunakan untuk melakukan dekomposisi time series menjadi beberapa komponen, yaitu trend, seasonal, residual, dan observed.
2. `matplotlib.pyplot` digunakan untuk membuat grafik sederhana.
3. `seaborn` librari visualisasi data.
"""

from statsmodels.tsa.seasonal import seasonal_decompose
import matplotlib.pyplot as plt
import seaborn as sns

"""## Struktur Data

`data.head()` untuk menampilkan lima baris pertapa dari data untuk memberikan gambaran awal tentang struktur data dan nilai - nilai data.
"""

data.head()

"""`data['Date'] = pd.to_datetime(data['Date'])` Mengonversi kolom `Date` menjadi format datetime, sehingga dapat diolah sebagai data waktu dalam analisis time series."""

data['Date'] = pd.to_datetime(data['Date'])

"""`data.info() `Memberikan informasi detail dentang data, termasuk jumlah nilai non-null, tipe data setiap kolom, dan ukuran dataset."""

data.info()

"""`data.tail()` Menampilkan 5 baris terakhir dari data, berguna untuk melihat data terakhir atau memeriksa nilai terbaru dalam time series."""

data.tail()

"""`data.describe() ` Memberikan statistik ringkas (Mean, std, min, max, dan kuarting) untuk kolom numerik, membantu memahami distribusi data."""

data.describe()

"""## Data Hilang Atau Null

`data.isnull().sum()` Untuk menghitung jumlai nilai yang hilang (null) disetiap kolom data. Hasilnya adalah jumlah total nilai kosong untuk setiap kolom, yang berguna untuk mengidentifikasi missing values dalam dataseat.
"""

data.isnull().sum()

"""## Time Series Decomposition

Code ini membantu dalam menganalisis pola musiman, tren, dan sisa error dari data.
1. `seasonal_decompose`, memisahkan data time series menjadi komponen **trend**, **seasonal**(musiman), dan **residual**.
2. `result.plot()`, memvisualisasikan hasil dekomposisi, menampilkan grafik terpisah untuk setiap komponen.
3. `plt.show()`, menampilkan plot dekomposisi secara lengkap.
"""

result = seasonal_decompose(data['Adj Close'], model='multiplicative', period=30)
result.plot()
plt.show()

"""## Visualisasi Data

Grafik ini untuk melihat trend harga Adj Close seiring waktu.
1. `data['Adj Close'].plot(...)`: Memplot harga `Adj Close` untuk melihat perubahan harga dari waktu ke waktu, dengan ukuran gambar yang diatur menjadi 10x6 inci.
2. `title='Adjusted Close Price Over Time'`: Menambahkan judul pada grafik.
3. `plt.xlabel('Date')` dan` plt.ylabel('Adj Close Price')`: Menambahkan label sumbu-x dan sumbu-y untuk konteks yang jelas.
4. `plt.show()`: Menampilkan plot.
"""

data['Adj Close'].plot(title='Adjusted Close Price Over Time', figsize=(10, 6))
plt.xlabel('Date')
plt.ylabel('Adj Close Price')
plt.show()

"""Grafik ini berguna untuk menganalisis tren dan pola dalam volume perdagangan sepanjang waktu.
1. `data['Volume'].plot(...)`: Memplot volume perdagangan untuk melihat perubahan volume dari waktu ke waktu, dengan ukuran gambar diatur menjadi 10x6 inci.
2.` title='Trading Volume Over Time'`: Menambahkan judul pada grafik.
3.` plt.xlabel('Date')` dan `plt.ylabel('Volume')`: Menambahkan label untuk sumbu-x (tanggal) dan sumbu-y (volume) agar lebih mudah dipahami.
4. `plt.show()`: Menampilkan plot.

"""

data['Volume'].plot(title='Trading Volume Over Time', figsize=(10, 6))
plt.xlabel('Date')
plt.ylabel('Volume')
plt.show()

"""## Korelasi Antar Kolom

Visualisasi ini membantu untuk memahami hubungan antara variabel dalam dataset, mengidentifikasi variabel yang memiliki korelasi tinggi atau rendah.
1. `plt.figure(figsize = (10, 8))`: Menetapkan ukuran gambar untuk grafik menjadi 10x8 inci.
2. `sns.heatmap(data.corr(), annot=True, cmap='coolwarm')`: Membuat heatmap untuk matriks korelasi dari dataset menggunakan seaborn. Parameter:
    - `data.corr()`: Menghitung matriks korelasi antar kolom.
    - `annot=True`: Menampilkan nilai korelasi di atas setiap sel dalam heatmap.
    - `cmap='coolwarm'`: Menentukan skema warna untuk heatmap, dengan warna yang bergradasi dari dingin ke hangat.
3. `plt.title('Correlation Matrix')`: Menambahkan judul pada heatmap.
4. `plt.show()`: Menampilkan heatmap.
"""

plt.figure(figsize = (10, 8))
sns.heatmap(data.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

"""# Facebook Prophet Forecasting

## Library Forecast

1. `import pandas as pd`: Mengimpor library Pandas, yang digunakan untuk manipulasi dan analisis data, khususnya untuk bekerja dengan DataFrame.
2. `from prophet import Prophet`: Mengimpor model Prophet dari library prophet, yang digunakan untuk melakukan peramalan time series dengan pendekatan yang berbasis pada komponen musiman dan tren.
3. `from sklearn.metrics import mean_absolute_error, mean_squared_error`: Mengimpor metrik dari sklearn untuk mengevaluasi model prediksi.
  - `mean_absolute_error`: Menghitung rata-rata kesalahan absolut antara nilai yang diprediksi dan nilai aktual.
  - `mean_squared_error`: Menghitung rata-rata kesalahan kuadrat antara nilai yang diprediksi dan nilai aktual.
4. `import plotly.express as px`: Mengimpor Plotly Express, library untuk visualisasi data interaktif yang memudahkan pembuatan berbagai jenis grafik.
5. `import numpy as np`: Mengimpor NumPy, library untuk operasi numerik dan manipulasi array, sering digunakan dalam analisis data dan pemrosesan matematis.
6. `import joblib`: Mengimpor Joblib, yang digunakan untuk menyimpan dan memuat model machine learning atau objek Python lainnya, sehingga memudahkan dalam melakukan penyimpanan dan pemulihan model.
"""

import pandas as pd
from prophet import Prophet
from sklearn.metrics import mean_absolute_error, mean_squared_error
import plotly.express as px
import numpy as np
import joblib

"""## Data Prep

Dilakukan pembagian data untuk training dan untuk test.
1. `train_data = data[data['Date'] < '2024-09-21']`: Membuat subset train_data yang berisi semua baris dari data di mana kolom Date kurang dari 21 September 2024.
2. `test_data = data[data['Date'] >= '2024-09-21']`: Membuat subset test_data yang berisi semua baris dari data di mana kolom Date sama dengan atau lebih besar dari 21 September 2024.
"""

train_data = data[data['Date'] < '2024-09-25']
test_data = data[data['Date'] >= '2024-09-25']

"""Penggantian nama kolom agar model prophet dapat mengenali kolom yang berisi tanggal dan nilai yang akan di prediksi.
1. ` train_data = train_data.rename(columns={'Date': 'ds', 'Adj Close': 'y'})`: Mengganti nama kolom `Date` menjadi `ds` dan kolom `Adj Close` menjadi `y` pada dataset pelatihan, sesuai dengan format input yang diperlukan oleh model Prophet.
2. `test_data = test_data.rename(columns={'Date': 'ds', 'Adj Close': 'y'})`: Melakukan hal yang sama untuk dataset pengujian.

"""

train_data = train_data.rename(columns={'Date': 'ds', 'Adj Close': 'y'})
test_data = test_data.rename(columns={'Date': 'ds', 'Adj Close': 'y'})

"""## Model Prophet

Langkah ini mempersiapkan model untuk melakukan prediksi berdasarkan data historis dan variable yang mempengaruhi harganya.
1. `model = Prophet(...)`: Membuat objek model Prophet dengan parameter yang ditentukan:
  - `yearly_seasonality=True`: Mengaktifkan komponen musiman tahunan.
  - `weekly_seasonality=True`: Mengaktifkan komponen musiman mingguan.
  - `daily_seasonality=True`: Mengaktifkan komponen musiman harian.
  - `seasonality_mode='multiplicative'`: Menggunakan model musiman multiplikatif.
  - `changepoint_prior_scale=0.5`: Menentukan kekuatan penyesuaian perubahan tren.
  - `seasonality_prior_scale=0.01`: Menentukan kekuatan penyesuaian komponen musiman.
  - `n_changepoints=30` : Menetapkan hingga 30 titik perubahan untuk menangkap perubahan tren dalam data.
2. `model.add_regressor('Open')`, `model.add_regressor('High')`, `model.add_regressor('Low')`, `model.add_regressor('Close')`: Menambahkan kolom `Open`, `High`, `Low`, dan `Close` sebagai regresor untuk membantu model dalam membuat prediksi lebih akurat berdasarkan variabel-variabel tersebut.
3.` model.fit(train_data[['ds', 'y', 'Open', 'High', 'Low', 'Close']])`: Melatih model menggunakan data pelatihan yang berisi kolom `ds` (tanggal), `y` (nilai yang diprediksi), dan regresor yang telah ditambahkan.
"""

model = Prophet(
    yearly_seasonality=True,
    weekly_seasonality=True,
    daily_seasonality=True,
    seasonality_mode='multiplicative',
    changepoint_prior_scale=0.5,
    seasonality_prior_scale=0.01,
    n_changepoints=30
)

model.add_regressor('Open')
model.add_regressor('High')
model.add_regressor('Low')
model.add_regressor('Close')
model.fit(train_data[['ds', 'y', 'Open', 'High', 'Low', 'Close']])

"""Langkah ini memungkikan model untuk menghasilkan prediksi harga berdasarkan data historis dan faktor - faktor yang mempengaruhi harga.
1. `future = model.make_future_dataframe(periods=len(test_data))`: Membuat DataFrame future yang berisi tanggal masa depan berdasarkan jumlah baris dalam `test_data`. Ini menambahkan periode waktu yang diperlukan untuk prediksi ke model.
2. `future = pd.concat([future,data[['Open', 'High', 'Low', 'Close']]], axis=1)`: Menggabungkan DataFrame future dengan kolom `Open`, `High`, `Low`, dan `Close` dari dataset asli. Ini memastikan bahwa semua variabel regresor yang diperlukan untuk prediksi tersedia dalam DataFrame masa depan.
3. `forecast = model.predict(future)`: Menggunakan model Prophet untuk memprediksi nilai masa depan berdasarkan DataFrame `future`, yang sekarang berisi tanggal dan regresor. Hasil prediksi disimpan dalam variabel `forecast`.

"""

future = model.make_future_dataframe(periods=len(test_data))
future = pd.concat([future,data[['Open', 'High', 'Low', 'Close']]], axis=1)
forecast = model.predict(future)

"""Dengan langkah ini, `forecast_test` siap digunakan untuk membandingkan prediksi dengan nilai aktual dalam data pengujian, sehingga evaluasi model dapat dilakukan.
1. `forecast_test = forecast[-len(test_data):]`: Mengambil bagian akhir dari DataFrame forecast yang sesuai dengan panjang dataset pengujian (`test_data`). Ini memastikan bahwa hanya prediksi yang relevan untuk periode pengujian yang diambil.
2. `forecast_test['ds'] = test_data['ds']`: Menambahkan kolom `ds` (tanggal) dari `test_data` ke `forecast_test`. Hal ini memastikan bahwa DataFrame `forecast_test` sekarang mencakup tanggal yang sesuai untuk setiap prediksi.


"""

forecast_test = forecast[-len(test_data):]
forecast_test['ds'] = test_data['ds']

"""## Hasil MAE, RMSE, dan Visual

Langkah ini penting untuk mengevaluasi seberapa baik model dalam memprediksi nilai di dataset pengujian.
1. `mae = mean_absolute_error(test_data['y'], forecast_test['yhat'])`: Menghitung Mean Absolute Error (MAE) antara nilai aktual (`y` dari `test_data`) dan nilai yang diprediksi (`yhat` dari `forecast_test`). MAE memberikan ukuran rata-rata kesalahan absolut dari prediksi.
2.` rmse = np.sqrt(mean_squared_error(test_data['y'], forecast_test['yhat']))`: Menghitung Root Mean Squared Error (RMSE) dengan mengambil akar kuadrat dari Mean Squared Error (MSE) antara nilai aktual dan prediksi. RMSE memberikan ukuran kesalahan kuadrat yang lebih sensitif terhadap outlier.
3. `print(f'Prophet with Best Regression and Parameters - MAE: {mae}, RMSE: {rmse}')`: Mencetak hasil MAE dan RMSE, memberikan informasi tentang kinerja model Prophet dengan regresor dan parameter terbaik yang digunakan.
"""

mae = mean_absolute_error(test_data['y'], forecast_test['yhat'])
rmse = np.sqrt(mean_squared_error(test_data['y'], forecast_test['yhat']))
print(f'Prophet Regression and Parameters - MAE: {mae}, RMSE: {rmse}')

"""Visualisasi ini memungkikan perbandingan langsung antara hasil prediksi dan nilai aktual, memberikan gambaran yang jelas tenang kinerja model.
1. `fig = px.line()`: Membuat objek figure baru untuk plot garis.
2. `fig.add_scatter(...)`:
  - Menambahkan garis untuk prediksi (`yhat`) dengan tanggal dari `forecast_test`, diwarnai biru dan diberi label 'Forecast'.
  - Menambahkan garis untuk nilai aktual (`y`) dengan tanggal dari `test_data`, diwarnai hijau dan diberi label 'Actual'.
3. `fig.update_layout(...)`: Mengatur tata letak plot dengan:
  - `title`: Judul plot.
  - `xaxis_title` dan `yaxis_title`: Label untuk sumbu-x (Tanggal) dan sumbu-y (Harga Penutupan yang Disesuaikan).
  - `xaxis_range`: Menentukan rentang sumbu-x dari 21 September 2024 hingga 21 Oktober 2024.
  - `hovermode='x unified'`: Mengatur mode hover untuk menampilkan nilai secara bersamaan saat kursor berada di atas sumbu-x.
4. `fig.show()`: Menampilkan plot interaktif.
"""

fig = px.line()
fig.add_scatter(x=forecast_test['ds'], y=forecast_test['yhat'], mode='lines', name='Forecast', line=dict(color='blue'))
fig.add_scatter(x=test_data['ds'], y=test_data['y'], mode='lines', name='Actual', line=dict(color='green'))
fig.update_layout(title='Prophet with Best Regression and Parameters Forecast vs Actual',
                  xaxis_title='Date',
                  yaxis_title='Adjusted Close Price',
                  xaxis_range=['2024-09-21', '2024-10-21'],
                  hovermode='x unified')
fig.show()

"""## Menyimpan Model

Menyimpan model ini berguna untuk menghindari proses latihan yang memakan waktu dan memudahkan penggunaan model.
1. `joblib.dump(...)`: Fungsi ini menyimpan objek Python (dalam hal ini, model) ke dalam format file yang efisien, sehingga model dapat dipulihkan (loaded) kembali di lain waktu tanpa perlu melatih ulang.
"""

joblib.dump(model, 'Goto_Prophet.pkl')